/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/interactive-campus-map.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/js/interactive-campus-map.js":
/*!******************************************!*\
  !*** ./src/js/interactive-campus-map.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(function ($) {
  $(document).ready(function () {
    var app = document.getElementById('campus-map');
    var sidebar = document.getElementById('campus-map-sidebar');
    var wrapper = app.getElementsByClassName('campus-map')[0];
    var component = app.getElementsByClassName('campus-map-component')[0];
    var areas = app.querySelectorAll('[data-area]');
    var zoomOut = document.getElementById('zoom-out');
    var resetBtn = document.getElementById('reset');
    var closeBtn = sidebar.getElementsByClassName("campus-map-sidebar--close")[0];
    var svg = wrapper.querySelector('svg'); // This variable will be used later for move events to check if pointer is down or not

    var isPointerDown = false; // This variable will contain the original coordinates when the user start pressing the mouse or touching the screen

    var pointerOrigin = {
      x: 0,
      y: 0
    };
    var transform = {
      x: 0,
      y: 0,
      z: 0
    };
    var newTransform = {
      x: 0,
      y: 0,
      z: 0
    };
    var scale = 1; // Function called by the event listeners when user start pressing/touching

    function onPointerDown(event) {
      isPointerDown = true; // We set the pointer as down

      scale = wrapper.dataset.zoom; // We get the pointer position on click/touchdown so we can get the value once the user starts to drag

      var pointerPosition = getPointFromEvent(event);
      pointerOrigin.x = pointerPosition.x;
      pointerOrigin.y = pointerPosition.y;
    } // This function returns an object with X & Y values from the pointer event


    function getPointFromEvent(event) {
      var point = {
        x: 0,
        y: 0
      }; // If event is triggered by a touch event, we get the position of the first finger

      if (event.targetTouches) {
        point.x = event.targetTouches[0].clientX;
        point.y = event.targetTouches[0].clientY;
      } else {
        point.x = event.clientX;
        point.y = event.clientY;
      }

      return point;
    } // Function called by the event listeners when user start moving/dragging


    function onPointerMove(event) {
      // Only run this function if the pointer is down
      if (!isPointerDown) {
        return;
      } // This prevent user to do a selection on the page


      event.preventDefault();
      event.stopPropagation(); // Get the pointer position

      var pointerPosition = getPointFromEvent(event); // We calculate the distance between the pointer origin and the current position
      // The viewBox x & y values must be calculated from the original values and the distances

      newTransform.x = transform.x + (pointerPosition.x - pointerOrigin.x);
      newTransform.y = transform.y + (pointerPosition.y - pointerOrigin.y);
      setTransform(newTransform.x, newTransform.y);
    }

    function onPointerUp() {
      // The pointer is no longer considered as down
      isPointerDown = false; // Multiply the scale level to get the number to multiply the SVG by

      var scaleChange = scale > 1 ? scale * 0.6 : 1; // Get width and height of the SVG multiplied by the scale. This gives the correct zoomed in size of the SVG

      var svgWidth = svg.width.baseVal.value * scaleChange;
      var svgHeight = svg.height.baseVal.value * scaleChange; // Get the bounds of the SVG. Takes the width/height minus the width/height of the component.
      // The remaining amount of the size outside of the bounds. Divided by 2 gives the amount each side is allowed to move.

      var boundsLeft = (svgWidth - component.offsetWidth) / 2;
      var boundsTop = (svgHeight - component.offsetHeight) / 2;
      var boundsRight = (component.offsetWidth - svgWidth) / 2;
      var boundsBottom = (component.offsetHeight - svgHeight) / 2; // Set the transform X value

      if (newTransform.x > 0 && scale == 1) {
        transform.x = 0;
      } else if (newTransform.x > boundsLeft) {
        transform.x = boundsLeft;
      } else if (newTransform.x < boundsRight) {
        transform.x = boundsRight;
      } else {
        transform.x = newTransform.x;
      } // Set the transform Y value


      if (newTransform.y > 0 && scale == 1) {
        transform.y = 0;
      } else if (newTransform.y > boundsTop) {
        transform.y = boundsTop;
      } else if (newTransform.y < boundsBottom) {
        transform.y = boundsBottom;
      } else {
        transform.y = newTransform.y;
      }

      setTransform(transform.x, transform.y);
    }

    function setTransform(x, y) {
      var transformString = "".concat(x, "px, ").concat(y, "px, 0"); // We apply the new viewBox values onto the SVG

      component.style.transform = "translate3d(" + transformString + ")";
    } // If browser supports pointer events


    if (window.PointerEvent) {
      svg.addEventListener('pointerdown', onPointerDown); // Pointer is pressed

      svg.addEventListener('pointerup', onPointerUp); // Releasing the pointer

      svg.addEventListener('pointerleave', onPointerUp); // Pointer gets out of the SVG area

      svg.addEventListener('pointermove', onPointerMove); // Pointer is moving
    } else {
      // Add all mouse events listeners fallback
      svg.addEventListener('mousedown', onPointerDown); // Pressing the mouse

      svg.addEventListener('mouseup', onPointerUp); // Releasing the mouse

      svg.addEventListener('mouseleave', onPointerUp); // Mouse gets out of the SVG area

      svg.addEventListener('mousemove', onPointerMove); // Mouse is moving
      // Add all touch events listeners fallback

      svg.addEventListener('touchstart', onPointerDown); // Finger is touching the screen

      svg.addEventListener('touchend', onPointerUp); // Finger is no longer touching the screen

      svg.addEventListener('touchmove', onPointerMove); // Finger is moving
    }

    var closesidebar = function closesidebar() {
      svg.classList.remove("selected");
      app.classList.remove("sidebar--active");

      for (var index = 0; index < areas.length; index++) {
        var area = areas[index];
        area.classList.remove("area--selected");
      }
    };

    closeBtn.addEventListener("click", function () {
      closesidebar();
    });
    zoomOut.addEventListener("click", function () {
      scale = wrapper.dataset.zoom;
      var scaleChange = scale > 1 ? scale * 0.6 : 1;
      var positionX, positionY;
      positionX = newTransform.x - newTransform.x / scaleChange;
      positionY = newTransform.y - newTransform.y / scaleChange;
      transform = {
        x: positionX,
        y: positionY,
        z: 0
      };
      newTransform = {
        x: positionX,
        y: positionY,
        z: 0
      };
      setTransform(transform.x, transform.y);
    });
    resetBtn.addEventListener("click", function () {
      transform = {
        x: 0,
        y: 0,
        z: 0
      };
      newTransform = {
        x: 0,
        y: 0,
        z: 0
      };
      setTransform(0, 0);
      zoomOut.classList.add("disabled");
    });
    document.addEventListener('keydown', function (event) {
      if ('Escape' == event.code) {
        closesidebar();
      }
    });
  });
})(jQuery);

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,